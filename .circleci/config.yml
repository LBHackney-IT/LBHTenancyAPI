version: 2
jobs:
  check:
    machine: true
    working_directory: ~/repo/LBHTenancyAPI
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: Build projects
          command: docker-compose build
      - run:
          name: Spin up docker instances
          command: docker-compose up -d ; sleep 20
      - run:
          name: Run tests
          command: docker run -e UH_CONNECTION_STRING="Data Source=tcp:stubuniversalhousing;Initial Catalog=StubUH;Integrated Security=False;User ID=sa;Password=Rooty-Tooty" --network repo_default --name lbhtenancyapitest -i --rm lbhtenancyapitest dotnet test
      - run:
          name: Lint
          command: echo "Please ensure your project has no warnings generated by the code style analysis - config files are included in the project."

  staging_release:
    machine: true
    working_directory: ~/repo/LBHTenancyAPI
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: Install AWS CLI
          command: bash ../.circleci/install-awscli.sh
      - run:
          name: Login to ECR
          command: aws ecr get-login --no-include-email | sh
      - run:
          name: Build new application Docker image
          command: docker build -f LBHTenancyAPI/Dockerfile -t hackney/apps/tenancy-api .
      - run:
          name: Tag new image for staging release
          command: docker tag hackney/apps/tenancy-api:latest $ECR_STAGING_IMAGE_URL
      - run:
          name: Release new image to ECR
          command: docker push $ECR_STAGING_IMAGE_URL
      - run:
          name: Force new deployment
          command: aws ecs update-service --cluster $ECS_STAGING_CLUSTER --service $ECS_STAGING_APP_NAME --force-new-deployment

  production_release:
    machine: true
    working_directory: ~/repo/LBHTenancyAPI
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: Install AWS CLI
          command: bash ../.circleci/install-awscli.sh
      - run:
          name: Login to ECR
          command: aws ecr get-login --no-include-email | sh
      - run:
          name: Build new application Docker image
          command: docker build -f LBHTenancyAPI/Dockerfile -t hackney/apps/tenancy-api .
      - run:
          name: Tag new image for production release
          command: docker tag hackney/apps/tenancy-api:latest $ECR_PRODUCTION_IMAGE_URL
      - run:
          name: Release new image to ECR
          command: docker push $ECR_PRODUCTION_IMAGE_URL
      - run:
          name: Force new deployment
          command: aws ecs update-service --cluster $ECS_PRODUCTION_CLUSTER --service $ECS_PRODUCTION_APP_NAME --force-new-deployment

workflows:
  version: 2
  continuous_delivery:
    jobs:
      - check
      - staging_release:
          requires:
            - check
          filters:
            branches:
              only: master
      - permit_production_release:
          type: approval
          requires:
            - staging_release
      - production_release:
          requires:
            - permit_production_release
